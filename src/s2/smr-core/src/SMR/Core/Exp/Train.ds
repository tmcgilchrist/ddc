
module SMR.Core.Exp.Train
export
{       trainCons;      trainAppend;
        trainBump;
        trainApply;     trainApplyVar;

        carIsEmpty;

        snvOfNamesArgs;
        snvIsEmpty;
        snvBump;
        snvApply;       snvApplyVar;

        upsIsEmpty;
        upsBump;        upsCombine;
        upsApply;       upsApplyVar;
}
import SMR.Core.Exp.Base
import Data.Text
where


-- Train ----------------------------------------------------------------------
-- | Cons a car on the front of an existing train.
--
--   If the new car is empty it will be suppressed.
--
--   If the new car can be combined with the first car on the existing
--   train then it will be combined.
--
trainCons (c1: Car s p) (cs2: List (Car s p)): List (Car s p)
 | carIsEmpty c1        = cs2
 | otherwise
 = case cs2 of
        Nil
         → Cons c1 Nil

        Cons c2 cs2'
         | CUps ups1  ← c1
         , CUps ups2  ← c2
         → Cons (CUps (upsCombine ups1 ups2)) cs2'

         | otherwise
         → Cons c1 cs2


-- | Append two trains.
trainAppend (ccA ccB: List (Car s p)): List (Car s p)
 = case ccA of
        Nil             → ccB
        Cons cA csA     → trainAppend' cA csA ccB


-- TODO: Inlining this into trainAppend as a where-binding causes a type
--       checker failure as the type variables don't match up.
trainAppend'
        (c1:      Car s p)
        (cs1 cc2: List (Car s p)): List (Car s p)
 = case cs1 of
        -- Combine the current state with the first car on the second train.
        Nil
         → trainCons c1 cc2

        -- Walk forward over the first train, combining ups's as we go.
        Cons c1' cs1'
         | CUps ups1  ← c1
         , CUps ups1' ← c1'
         → trainAppend' (CUps (upsCombine ups1 ups1')) cs1' cc2

         | otherwise
         → Cons c1 (trainAppend' c1' cs1' cc2)


-- | Bump a train due to pushing it under an abstraction with the
--   given parameter names.
trainBump
        (ns: List Name)
        (cs: List (Car s p)): List (Car s p)
 = case cs of
        Nil     → Nil

        Cons (CSim snv) cs'
         → trainCons (CSim (snvBump ns snv)) $ trainBump ns cs'

        Cons (CRec snv) cs'
         → trainCons (CRec (snvBump ns snv)) $ trainBump ns cs'

        Cons (CUps ups) cs'
         → trainCons (CUps (upsBump ns ups)) $ trainBump ns cs'


-- | Wrap an expression in a substitution train.
--   If the expression is a plain
trainApply (cs1: List (Car s p)) (xx: Exp s p): Exp s p
 | Nil  ← cs1
 = xx

 | otherwise
 = case xx of
        XRet xs         → XRet (map (trainApply cs1) xs)
        XRef (RMac n)   → xx
        XRef (RSym n)   → xx
        XRef (RPrm n)   → xx
        XVar name depth → trainApplyVar cs1 name depth
        XSub cs2  x2    → trainApply (trainAppend cs2 cs1) x2
        _               → XSub cs1 xx


-- Apply a train onto a variable of a given name and depth.
trainApplyVar
        (cs: List (Car s p))
        (name: Name) (depth: Nat): Exp s p
 = case cs of
        Nil
         → XVar name depth

        Cons (CSim snv) cs'
         → trainApply cs' (snvApplyVar False snv name depth)

        Cons (CRec snv) cs'
         → trainApply cs' (snvApplyVar True  snv name depth)

        Cons (CUps ups) cs'
         → trainApply cs' (upsApplyVar ups name depth)


-- Car ------------------------------------------------------------------------
-- | Check if a substitution car is empty.
carIsEmpty (c: Car s p): Bool
 = case c of
        CSim snv → snvIsEmpty snv
        CRec snv → snvIsEmpty snv
        CUps ups → upsIsEmpty ups


-- Snv ------------------------------------------------------------------------
-- | Build a substitution from lists of names and arguments.
snvOfNamesArgs (ns: List Name) (xs: List (Exp s p)): Snv s p
 = SSnv (zip (zip ns (replicate (length ns) 0)) xs)


-- | Check if the given substitution is empty.
snvIsEmpty ((SSnv bs): Snv s p): Bool
 = case bs of
        Nil     → True
        _       → False


-- | Bump a substitution due to pushing it under an abstraction with
--   the given parameter names.
snvBump (ns: List Name)
        ((SSnv ts): Snv s p): Snv s p
 = SSnv $ mapMaybe (snvBump1 ns) ts
 where
        snvBump1
                (names: List Name)
                (b:     ((Name, Nat), Exp s p))
                :       Maybe ((Name, Nat), Exp s p)
         | ((name, depth), x) ← b
         , elem name names
         = Nothing

         | ((name, depth), x) ← b
         = Just ( (name, depth + (if elem name names then 1 else 0))
                , upsApply (UUps (map (\name' → ((name', 0), 1)) names)) x)


-- | Wrap a train consisting of a single simultaneous substitution
--   around an expression.
snvApply
        (rec: Bool)
        (snv@(SSnv bs): Snv s p) (xx: Exp s p): Exp s p
 = case bs of
        Nil     → xx
        _ | rec → trainApply (Cons (CRec snv) Nil) xx
        _       → trainApply (Cons (CSim snv) Nil) xx


-- | Apply a substitution to a variable of a given name and depth.
snvApplyVar
        (rec: Bool)
        (snv@(SSnv bs): Snv s p)
        (name: Name) (depth: Nat): Exp s p
 = case bs of
        Nil
         → XVar name depth

        Cons b'@((name', depth'), x') bs'
         | name  == name'
         , depth == depth'
         → if rec then XSub (Cons (CRec snv) Nil) x'
                   else x'

         | name   == name'
         , depth  >  depth'
         → XVar name (depth - 1)

         | otherwise
         → snvApplyVar rec (SSnv bs') name depth


-- Ups ------------------------------------------------------------------------
-- | Check if the given ups is empty.
upsIsEmpty ((UUps bs): Ups): Bool
 = case bs of
        Nil     → True
        _       → False


-- | Wrap an expression in a train consisting of a single ups.
upsApply (ups@(UUps us): Ups) (xx: Exp s p): Exp s p
 = case us of
        Nil     → xx
        _       → trainApply (Cons (CUps ups) Nil) xx


-- | Apply an ups to a variable.
upsApplyVar ((UUps bs): Ups) (name: Name) (ix: Nat): Exp s n
 = case bs of
        Nil
         -> XVar name ix

        Cons u'@((name', depth'), inc') bs'
         | name   == name'
         , depth' <= ix
         → upsApplyVar (UUps bs') name (ix + inc')

         | otherwise
         → upsApplyVar (UUps bs') name ix


-- | Bump ups (substitution lifting) due to pushing it
--   under an absraction with the given named binders.
upsBump (ns: List Name) ((UUps bs): Ups): Ups
 = UUps $ map (upsBump1 ns) bs
 where
        upsBump1 (ns:   List Name)
                 (l:    ((Name, Nat), Nat))
                 :      ((Name, Nat), Nat)
         | ((n, d), inc) ← l
         , elem n ns
         = ((n, d + 1), inc)

         | otherwise
         = l


-- | Combine two lists of ups.
upsCombine : Ups → Ups → Ups
upsCombine (UUps ts1) (UUps ts2)
 = UUps (foldr upsCombineBump ts2 ts1)


-- | Combine a bump with an existing list of them.
--   Applying the result to an expression will achieve the same result as
--   applying the whole list and then the extra one.
upsCombineBump (b: UpsBump) (bs: List UpsBump): List UpsBump
 | ((name, depth), inc) ← b
 = case bs of
        -- We cannot combine the new bump with anything else,
        -- so add it to the end of the list.
        Nil
         → Cons b Nil

        Cons b'@((name', depth'), inc') bs'
         -- Combine the new bump with an existing one of the same name.
         | name  == name'
         , depth == depth'
         → Cons ((name, depth'), inc + inc') bs'

         -- Try to combine the new bump with the tail of the list.
         | otherwise
         → Cons b' (upsCombineBump b bs')



module SMR.Source.Pretty
export
{       pretty_Exp
}
import SMR.Core.Exp
import Class.Pretty
import Data.Text
where


-- Ref ------------------------------------------------------------------------
pprRef [s p: Data] {Pretty s} {Pretty p} (rr: ExpRef s p): Text
 = case rr of
        RMac n  -> "@" % n
        RSet n  -> "+" % n
        RSym s  -> "%" % ppr s
        RPrm p  -> "#" % ppr p


-- Exp ------------------------------------------------------------------------
-- | Pretty printer for an expression.
pretty_Exp {Pretty s} {Pretty p}: Pretty (Exp s p)
 = Pretty $ \xx -> pprExp' ContextBody xx


-- | Context of a pretty printed expression.
data Context where
        ContextBody   : Context
        ContextLeft   : Context
        ContextFun    : Context
        ContextArg    : Context


-- | Pretty print an expression in the given context.
pprExp' [s p: Data]
        {Pretty s} {Pretty p}
        (ctx: Context) (xx: Exp s p): Text

 | ContextBody  <- ctx
 = case xx of
--        -- application
--        XApp x1 x2
--         |  pprExpNeedsParensAsArg x2
--         -> pprExp' ContextLeft x1 %% "$" %% pprExp' ContextBody x2


        _ -> pprExp' ContextLeft xx


 | ContextLeft  <- ctx
 = case xx of
        XRef r      -> pprRef r

        XRet xs
         -> "<" % pprPunc ", " (map (pprExp' ContextBody) xs) % ">"

        XVar name 0 -> name
        XVar name d -> name % "^" % show d

        -- abstraction
        -- TODO: adding the "\\" string here causes a compile error.
        XAbs ns x
         -> textOfChar '\\' % pprSep (map pprParam ns)  % "." %% pprExp' ContextBody x

        XApp x1 x2
         -> pprExp' ContextFun x1  %% pprExp' ContextArg x2

        -- substitution
        XSub cs x
         -> pprTrain cs % "." % pprExp' ContextBody x

        -- keyed expressions
        XKey k x
         ->  pprKey k %% pprExp' ContextArg x


 | ContextFun   <- ctx
 = case xx of
        XAbs _ _    -> parens $ pprExp' ContextBody xx
        XSub _ _    -> parens $ pprExp' ContextBody xx
        _           -> pprExp' ContextLeft xx

 | ContextArg   <- ctx
 = case xx of
        XRet _      -> pprExp' ContextBody xx
        XRef _      -> pprExp' ContextBody xx
        XVar _      -> pprExp' ContextBody xx
        _           -> parens $ pprExp' ContextBody xx


pprParam (pp: Param): Text
 = case pp of
        PParam n FVal   -> n
        PParam n FExp   -> "~" % n


pprKey  (kk: Key): Text
 = case kk of
        KBox            -> "##box"
        KRun            -> "##run"
        KSeq            -> "##seq"
        KTag            -> "##tag"


pprExpNeedsParensAsArg (xx: Exp s p): Bool
 = case xx of
        XAbs _ _        -> True
        XApp _ _        -> True
        XKey _ _        -> True
        _               -> False

-- Train ----------------------------------------------------------------------
pprTrain {Pretty s} {Pretty p}
         (cs: List (Car s p)): Text
 = case cs of
        Nil         -> ""
        Cons c cs'  -> pprTrain cs' % pprCar c


pprCar  {Pretty s} {Pretty p}
        (c: (Car s p)): Text
 = case c of
        CSim snv    -> pprSnv snv
        CRec snv    -> "[" % pprSnv snv % "]"
        CUps ups    -> pprUps ups


-- Snv ------------------------------------------------------------------------
pprSnv  {Pretty s} {Pretty p}
        ((SSnv en): Snv s p): Text
 = "[" % pprPunc ", " (map pprBind $ reverse en) % "]"


pprBind {Pretty s} {Pretty p}
        (bn: ((Name, Nat), Exp s p)): Text
 = case bn of
        ((name, depth), x)
         |  depth == 0
         -> name %  "=" % pprExp' ContextBody x

         |  otherwise
         -> name %  "^" % show depth % "=" %% pprExp' ContextBody x


-- Ups ------------------------------------------------------------------------
pprUps ((UUps us): Ups): Text
 = "{" % pprPunc ", " (map pprBump $ reverse us) % "}"


pprBump (bm: ((Name, Nat), Nat)): Text
 = case bm of
        ((name, depth), inc)
         |  depth == 0
         -> name % ":" % show inc

         |  otherwise
         -> name % "^" % show depth % ":" % show inc


-- Utils ----------------------------------------------------------------------
pprPunc (p: Text) (xx: List Text): Text
 = case xx of
        Nil         -> ""
        Cons x Nil  -> x
        Cons x xs   -> x % p % pprPunc p xs


pprSep  (xx: List Text): Text
 = case xx of
        Nil         -> ""
        Cons x Nil  -> x
        Cons x xs   -> x %% pprSep xs

